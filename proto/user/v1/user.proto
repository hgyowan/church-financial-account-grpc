syntax = "proto3";

package user.v1;
option go_package = "github.com/hgyowan/church-financial-account-grpc/gen/user/v1";

import "google/protobuf/descriptor.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "user/model/v1/model.proto";
import "google/protobuf/timestamp.proto";
import "google/api/httpbody.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "CFM API Swagger"
    version: "1.0"
    contact: {
      name: "gRPC-Gateway project"
      url: "https://github.com/hgyowan/church-financial-grpc-gateway"
    }
  }
  host: "cfm-api-dev.holyflows.com"
  schemes: HTTPS
  schemes: HTTP
  responses: {
    key: "success"
    value: {
      description: "Success Response"
      schema: {
        json_schema: {example: "{\"code\": 1, \"data\": \"200 에 해당하는 응답\"}"}
      }
    }
  }
  security_definitions: {
    security: {
      key: "X-User-Token"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "x-user-token"
      }
    }
  }
  security: {
    security_requirement: {
      key: "X-User-Token";
    };
  };
};

service UserService {
  rpc RegisterSSOUser(RegisterSSOUserRequest) returns (RegisterSSOUserResponse) {
    option (google.api.http) = {
      post: "/v1/public/user/register/{socialType}"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "SSO 회원가입"
      description: "SSO 회원가입"
      responses: {
        key: "400"
        value: {
          description: "(40001) wrong variable type <br> (50002) terms agree required <br> (50003) unsupported oauth provider <br> (50004) invalid sso account"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
      responses: {
        key: "500"
        value: {
          description: "(10001) fila to create data <br> (10003) fila to delete data <br> (10004) fail to get data <br> (40002) duplicate data <br> (40003) expired data"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
    };
  }

  rpc RegisterEmailUser(RegisterEmailUserRequest) returns (RegisterEmailUserResponse) {
    option (google.api.http) = {
      post: "/v1/public/user/register/email"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "이메일 회원가입"
      description: "이메일 회원가입"
      responses: {
        key: "400"
        value: {
          description: "(40001) wrong variable type <br> (50001) password mismatch <br> (50002) terms agree required"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
      responses: {
        key: "500"
        value: {
          description: "(10001) fila to create data <br> (10004) fail to get data <br> (40002) duplicate data"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
    };
  }

  rpc LoginSSO(LoginSSORequest) returns (LoginSSOResponse) {
    option (google.api.http) = {
      post: "/v1/public/user/login/{socialType}"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "SSO 로그인"
      description: "SSO 로그인"
      responses: {
        key: "400"
        value: {
          description: "(40001) wrong variable type <br> (50003) unsupported oauth provider <br> (50004) invalid sso account <br> (50006) already exists email"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "(40004) not found data"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
      responses: {
        key: "500"
        value: {
          description: "(10001) fila to create data <br> (10004) fail to get data"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
    };
  }

  rpc LoginEmail(LoginEmailRequest) returns (LoginEmailResponse) {
    option (google.api.http) = {
      post: "/v1/public/user/login/email"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "이메일 로그인"
      description: "이메일 로그인"
      responses: {
        key: "400"
        value: {
          description: "(40001) wrong variable type <br> (50005) invalid password"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "(40004) not found data"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
      responses: {
        key: "500"
        value: {
          description: "(10001) fila to create data <br> (10004) fail to get data"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
    };
  }

  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      post: "/v1/public/user/email/verify"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "이메일 인증하기"
      description: "이메일 인증하기"
      responses: {
        key: "400"
        value: {
          description: "(40001) wrong variable type"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
      responses: {
        key: "500"
        value: {
          description: "(10003) fail to delete data <br> (10004) fail to get data <br> (40002) duplicate data <br> (40003) expired data"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
    };
  }

  rpc SendVerifyEmail(SendVerifyEmailRequest) returns (SendVerifyEmailResponse) {
    option (google.api.http) = {
      post: "/v1/public/user/email/verify/send"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "이메일 인증하기 메일 발송"
      description: "이메일 인증하기 메일 발송"
      responses: {
        key: "400"
        value: {
          description: "(40001) wrong variable type"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
      responses: {
        key: "500"
        value: {
          description: "(10001) fail to create data <br> (10004) fail to get data <br> (30001) fail to send email <br> (40002) duplicate data"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
    };
  }

  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1/user"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "유저 정보 조회"
      description: "유저 정보 조회"
      responses: {
        key: "400"
        value: {
          description: "(40001) wrong variable type"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "(40004) not found data"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
      responses: {
        key: "500"
        value: {
          description: "(10004) fail to get data"
          schema: {
            json_schema: {example: "{\"code\": \"에러코드\", \"data\": null}"}
          }
        }
      }
    };
  }

  rpc ListUserSimple(ListUserSimpleRequest) returns (ListUserSimpleResponse) {}
}

message RegisterEmailUserRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "이메일 회원가입 요청"
      required: ["name", "email", "password", "passwordConfirm", "isTermsAgreed", "isMarketingAgreed"]
    }
  };

  string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "사용자 이름"}];
  string nickname = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "닉네임"}];
  string email = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "이메일 주소"}];
  string phoneNumber = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "휴대폰 번호"}];
  string password = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "비밀번호"}];
  string passwordConfirm = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "비밀번호 확인"}];
  bool isTermsAgreed = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "이용약관 동의 여부"}];
  bool isMarketingAgreed = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "마케팅 정보 수신 동의 여부"}];
}
message RegisterEmailUserResponse {}

message LoginEmailRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "이메일 로그인 요청"
      required: ["email", "password"]
    }
  };

  string email = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "이메일"}];
  string password = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "비밀번호"}];
}
message LoginEmailResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "이메일 로그인 응답"
      required: ["accessToken", "refreshToken"]
    }
  };

  string accessToken = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "엑세스 토큰"}];
  string refreshToken = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "리프레시 토큰"}];
}

message RegisterSSOUserRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "SSO 회원가입 요청"
      required: ["socialType", "ssoUserId", "name", "nickname", "isTermsAgreed", "isMarketingAgreed"]
    }
  };

  string socialType = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "SSO 구분 (kakao, google)"}];
  string ssoUserId = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "SSO 유저 ID"}];
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "사용자 이름"}];
  string nickname = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "닉네임"}];
  string phoneNumber = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "휴대폰 번호"}];
  bool isTermsAgreed = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "이용약관 동의 여부"}];
  bool isMarketingAgreed = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "마케팅 정보 수신 동의 여부"}];
}
message RegisterSSOUserResponse {}

message LoginSSORequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "SSO 로그인 요청"
      required: ["socialType", "code"]
    }
  };

  string socialType = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "SSO 구분 (kakao, google)"}];
  string code = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "authorize code"}];
}
message LoginSSOResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "SSO 로그인 응답"
      required: ["accessToken", "refreshToken"]
    }
  };

  string accessToken = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "엑세스 토큰"}];
  string refreshToken = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "리프레시 토큰"}];
}

message VerifyEmailRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "이메일 인증하기 요청"
      required: ["email", "code"]
    }
  };

  string email = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "이메일"}];
  string code = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "인증번호"}];
}
message VerifyEmailResponse {}

message SendVerifyEmailRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "이메일 인증하기 메일 발송 요청"
      required: ["email"]
    }
  };

  string email = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "이메일"}];
}
message SendVerifyEmailResponse {}

message GetUserRequest {}
message GetUserResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "유저 정보 조회 응답"
      required: ["id", "email", "name", "nickname", "provider", "isTermsAgreed", "isMarketingAgreed", "workspaces", "registeredAt"]
    }
  };

  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "유저 아이디"}];
  string email = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "유저 이메일"}];
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "유저 이름"}];
  string nickname = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "유저 닉네임"}];
  string phoneNumber = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "연락처"}];
  string provider = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "계정 출처 (email, kakao, google)"}];
  bool isTermsAgreed = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "개인정보 및 약관 동의 여부"}];
  bool isMarketingAgreed = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "마케팅 동의 여부"}];
  repeated model.v1.WorkspaceSimple workspaces = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "참여 워크스페이스 목록"}];
  google.protobuf.Timestamp registeredAt = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "가입일"}];
}

message ListUserSimpleRequest {
  repeated string userIds = 1;
}
message ListUserSimpleResponse {
  repeated model.v1.UserSimple list = 1;
}