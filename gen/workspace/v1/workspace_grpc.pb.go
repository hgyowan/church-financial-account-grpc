// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: workspace/v1/workspace.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkspaceServiceClient is the client API for WorkspaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceServiceClient interface {
	ListWorkspaceIntro(ctx context.Context, in *ListWorkspaceIntroRequest, opts ...grpc.CallOption) (*ListWorkspaceIntroResponse, error)
	SendWorkspaceInviteMessage(ctx context.Context, in *SendWorkspaceInviteMessageRequest, opts ...grpc.CallOption) (*SendWorkspaceInviteMessageResponse, error)
}

type workspaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceServiceClient(cc grpc.ClientConnInterface) WorkspaceServiceClient {
	return &workspaceServiceClient{cc}
}

func (c *workspaceServiceClient) ListWorkspaceIntro(ctx context.Context, in *ListWorkspaceIntroRequest, opts ...grpc.CallOption) (*ListWorkspaceIntroResponse, error) {
	out := new(ListWorkspaceIntroResponse)
	err := c.cc.Invoke(ctx, "/workspace.v1.WorkspaceService/ListWorkspaceIntro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) SendWorkspaceInviteMessage(ctx context.Context, in *SendWorkspaceInviteMessageRequest, opts ...grpc.CallOption) (*SendWorkspaceInviteMessageResponse, error) {
	out := new(SendWorkspaceInviteMessageResponse)
	err := c.cc.Invoke(ctx, "/workspace.v1.WorkspaceService/SendWorkspaceInviteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceServiceServer is the server API for WorkspaceService service.
// All implementations should embed UnimplementedWorkspaceServiceServer
// for forward compatibility
type WorkspaceServiceServer interface {
	ListWorkspaceIntro(context.Context, *ListWorkspaceIntroRequest) (*ListWorkspaceIntroResponse, error)
	SendWorkspaceInviteMessage(context.Context, *SendWorkspaceInviteMessageRequest) (*SendWorkspaceInviteMessageResponse, error)
}

// UnimplementedWorkspaceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWorkspaceServiceServer struct {
}

func (UnimplementedWorkspaceServiceServer) ListWorkspaceIntro(context.Context, *ListWorkspaceIntroRequest) (*ListWorkspaceIntroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaceIntro not implemented")
}
func (UnimplementedWorkspaceServiceServer) SendWorkspaceInviteMessage(context.Context, *SendWorkspaceInviteMessageRequest) (*SendWorkspaceInviteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWorkspaceInviteMessage not implemented")
}

// UnsafeWorkspaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceServiceServer will
// result in compilation errors.
type UnsafeWorkspaceServiceServer interface {
	mustEmbedUnimplementedWorkspaceServiceServer()
}

func RegisterWorkspaceServiceServer(s grpc.ServiceRegistrar, srv WorkspaceServiceServer) {
	s.RegisterService(&WorkspaceService_ServiceDesc, srv)
}

func _WorkspaceService_ListWorkspaceIntro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspaceIntroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).ListWorkspaceIntro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workspace.v1.WorkspaceService/ListWorkspaceIntro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).ListWorkspaceIntro(ctx, req.(*ListWorkspaceIntroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceService_SendWorkspaceInviteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWorkspaceInviteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServiceServer).SendWorkspaceInviteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workspace.v1.WorkspaceService/SendWorkspaceInviteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServiceServer).SendWorkspaceInviteMessage(ctx, req.(*SendWorkspaceInviteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceService_ServiceDesc is the grpc.ServiceDesc for WorkspaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workspace.v1.WorkspaceService",
	HandlerType: (*WorkspaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkspaceIntro",
			Handler:    _WorkspaceService_ListWorkspaceIntro_Handler,
		},
		{
			MethodName: "SendWorkspaceInviteMessage",
			Handler:    _WorkspaceService_SendWorkspaceInviteMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workspace/v1/workspace.proto",
}
