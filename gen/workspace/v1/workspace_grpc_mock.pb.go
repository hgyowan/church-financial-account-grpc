// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: workspace/v1/workspace.proto

package v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockWorkspaceServiceClient is a mock of WorkspaceServiceClient interface.
type MockWorkspaceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceServiceClientMockRecorder
}

// MockWorkspaceServiceClientMockRecorder is the mock recorder for MockWorkspaceServiceClient.
type MockWorkspaceServiceClientMockRecorder struct {
	mock *MockWorkspaceServiceClient
}

// NewMockWorkspaceServiceClient creates a new mock instance.
func NewMockWorkspaceServiceClient(ctrl *gomock.Controller) *MockWorkspaceServiceClient {
	mock := &MockWorkspaceServiceClient{ctrl: ctrl}
	mock.recorder = &MockWorkspaceServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceServiceClient) EXPECT() *MockWorkspaceServiceClientMockRecorder {
	return m.recorder
}

// ListWorkspaceIntro mocks base method.
func (m *MockWorkspaceServiceClient) ListWorkspaceIntro(ctx context.Context, in *ListWorkspaceIntroRequest, opts ...grpc.CallOption) (*ListWorkspaceIntroResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspaceIntro", varargs...)
	ret0, _ := ret[0].(*ListWorkspaceIntroResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceIntro indicates an expected call of ListWorkspaceIntro.
func (mr *MockWorkspaceServiceClientMockRecorder) ListWorkspaceIntro(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceIntro", reflect.TypeOf((*MockWorkspaceServiceClient)(nil).ListWorkspaceIntro), varargs...)
}

// SendWorkspaceInviteMessage mocks base method.
func (m *MockWorkspaceServiceClient) SendWorkspaceInviteMessage(ctx context.Context, in *SendWorkspaceInviteMessageRequest, opts ...grpc.CallOption) (*SendWorkspaceInviteMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendWorkspaceInviteMessage", varargs...)
	ret0, _ := ret[0].(*SendWorkspaceInviteMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWorkspaceInviteMessage indicates an expected call of SendWorkspaceInviteMessage.
func (mr *MockWorkspaceServiceClientMockRecorder) SendWorkspaceInviteMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWorkspaceInviteMessage", reflect.TypeOf((*MockWorkspaceServiceClient)(nil).SendWorkspaceInviteMessage), varargs...)
}

// MockWorkspaceServiceServer is a mock of WorkspaceServiceServer interface.
type MockWorkspaceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceServiceServerMockRecorder
}

// MockWorkspaceServiceServerMockRecorder is the mock recorder for MockWorkspaceServiceServer.
type MockWorkspaceServiceServerMockRecorder struct {
	mock *MockWorkspaceServiceServer
}

// NewMockWorkspaceServiceServer creates a new mock instance.
func NewMockWorkspaceServiceServer(ctrl *gomock.Controller) *MockWorkspaceServiceServer {
	mock := &MockWorkspaceServiceServer{ctrl: ctrl}
	mock.recorder = &MockWorkspaceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceServiceServer) EXPECT() *MockWorkspaceServiceServerMockRecorder {
	return m.recorder
}

// ListWorkspaceIntro mocks base method.
func (m *MockWorkspaceServiceServer) ListWorkspaceIntro(ctx context.Context, in *ListWorkspaceIntroRequest) (*ListWorkspaceIntroResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceIntro", ctx, in)
	ret0, _ := ret[0].(*ListWorkspaceIntroResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceIntro indicates an expected call of ListWorkspaceIntro.
func (mr *MockWorkspaceServiceServerMockRecorder) ListWorkspaceIntro(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceIntro", reflect.TypeOf((*MockWorkspaceServiceServer)(nil).ListWorkspaceIntro), ctx, in)
}

// SendWorkspaceInviteMessage mocks base method.
func (m *MockWorkspaceServiceServer) SendWorkspaceInviteMessage(ctx context.Context, in *SendWorkspaceInviteMessageRequest) (*SendWorkspaceInviteMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWorkspaceInviteMessage", ctx, in)
	ret0, _ := ret[0].(*SendWorkspaceInviteMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWorkspaceInviteMessage indicates an expected call of SendWorkspaceInviteMessage.
func (mr *MockWorkspaceServiceServerMockRecorder) SendWorkspaceInviteMessage(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWorkspaceInviteMessage", reflect.TypeOf((*MockWorkspaceServiceServer)(nil).SendWorkspaceInviteMessage), ctx, in)
}
