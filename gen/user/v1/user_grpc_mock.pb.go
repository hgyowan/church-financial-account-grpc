// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: user/v1/user.proto

package v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceClient)(nil).GetUser), varargs...)
}

// ListUserSimple mocks base method.
func (m *MockUserServiceClient) ListUserSimple(ctx context.Context, in *ListUserSimpleRequest, opts ...grpc.CallOption) (*ListUserSimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserSimple", varargs...)
	ret0, _ := ret[0].(*ListUserSimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserSimple indicates an expected call of ListUserSimple.
func (mr *MockUserServiceClientMockRecorder) ListUserSimple(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserSimple", reflect.TypeOf((*MockUserServiceClient)(nil).ListUserSimple), varargs...)
}

// LoginEmail mocks base method.
func (m *MockUserServiceClient) LoginEmail(ctx context.Context, in *LoginEmailRequest, opts ...grpc.CallOption) (*LoginEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginEmail", varargs...)
	ret0, _ := ret[0].(*LoginEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginEmail indicates an expected call of LoginEmail.
func (mr *MockUserServiceClientMockRecorder) LoginEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginEmail", reflect.TypeOf((*MockUserServiceClient)(nil).LoginEmail), varargs...)
}

// LoginSSO mocks base method.
func (m *MockUserServiceClient) LoginSSO(ctx context.Context, in *LoginSSORequest, opts ...grpc.CallOption) (*LoginSSOResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginSSO", varargs...)
	ret0, _ := ret[0].(*LoginSSOResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginSSO indicates an expected call of LoginSSO.
func (mr *MockUserServiceClientMockRecorder) LoginSSO(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginSSO", reflect.TypeOf((*MockUserServiceClient)(nil).LoginSSO), varargs...)
}

// RegisterEmailUser mocks base method.
func (m *MockUserServiceClient) RegisterEmailUser(ctx context.Context, in *RegisterEmailUserRequest, opts ...grpc.CallOption) (*RegisterEmailUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterEmailUser", varargs...)
	ret0, _ := ret[0].(*RegisterEmailUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEmailUser indicates an expected call of RegisterEmailUser.
func (mr *MockUserServiceClientMockRecorder) RegisterEmailUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEmailUser", reflect.TypeOf((*MockUserServiceClient)(nil).RegisterEmailUser), varargs...)
}

// RegisterSSOUser mocks base method.
func (m *MockUserServiceClient) RegisterSSOUser(ctx context.Context, in *RegisterSSOUserRequest, opts ...grpc.CallOption) (*RegisterSSOUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterSSOUser", varargs...)
	ret0, _ := ret[0].(*RegisterSSOUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSSOUser indicates an expected call of RegisterSSOUser.
func (mr *MockUserServiceClientMockRecorder) RegisterSSOUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSSOUser", reflect.TypeOf((*MockUserServiceClient)(nil).RegisterSSOUser), varargs...)
}

// SendVerifyEmail mocks base method.
func (m *MockUserServiceClient) SendVerifyEmail(ctx context.Context, in *SendVerifyEmailRequest, opts ...grpc.CallOption) (*SendVerifyEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendVerifyEmail", varargs...)
	ret0, _ := ret[0].(*SendVerifyEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendVerifyEmail indicates an expected call of SendVerifyEmail.
func (mr *MockUserServiceClientMockRecorder) SendVerifyEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerifyEmail", reflect.TypeOf((*MockUserServiceClient)(nil).SendVerifyEmail), varargs...)
}

// VerifyEmail mocks base method.
func (m *MockUserServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyEmail", varargs...)
	ret0, _ := ret[0].(*VerifyEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUserServiceClientMockRecorder) VerifyEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUserServiceClient)(nil).VerifyEmail), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserServiceServer) GetUser(ctx context.Context, in *GetUserRequest) (*GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, in)
	ret0, _ := ret[0].(*GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceServerMockRecorder) GetUser(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceServer)(nil).GetUser), ctx, in)
}

// ListUserSimple mocks base method.
func (m *MockUserServiceServer) ListUserSimple(ctx context.Context, in *ListUserSimpleRequest) (*ListUserSimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserSimple", ctx, in)
	ret0, _ := ret[0].(*ListUserSimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserSimple indicates an expected call of ListUserSimple.
func (mr *MockUserServiceServerMockRecorder) ListUserSimple(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserSimple", reflect.TypeOf((*MockUserServiceServer)(nil).ListUserSimple), ctx, in)
}

// LoginEmail mocks base method.
func (m *MockUserServiceServer) LoginEmail(ctx context.Context, in *LoginEmailRequest) (*LoginEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginEmail", ctx, in)
	ret0, _ := ret[0].(*LoginEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginEmail indicates an expected call of LoginEmail.
func (mr *MockUserServiceServerMockRecorder) LoginEmail(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginEmail", reflect.TypeOf((*MockUserServiceServer)(nil).LoginEmail), ctx, in)
}

// LoginSSO mocks base method.
func (m *MockUserServiceServer) LoginSSO(ctx context.Context, in *LoginSSORequest) (*LoginSSOResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginSSO", ctx, in)
	ret0, _ := ret[0].(*LoginSSOResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginSSO indicates an expected call of LoginSSO.
func (mr *MockUserServiceServerMockRecorder) LoginSSO(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginSSO", reflect.TypeOf((*MockUserServiceServer)(nil).LoginSSO), ctx, in)
}

// RegisterEmailUser mocks base method.
func (m *MockUserServiceServer) RegisterEmailUser(ctx context.Context, in *RegisterEmailUserRequest) (*RegisterEmailUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEmailUser", ctx, in)
	ret0, _ := ret[0].(*RegisterEmailUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEmailUser indicates an expected call of RegisterEmailUser.
func (mr *MockUserServiceServerMockRecorder) RegisterEmailUser(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEmailUser", reflect.TypeOf((*MockUserServiceServer)(nil).RegisterEmailUser), ctx, in)
}

// RegisterSSOUser mocks base method.
func (m *MockUserServiceServer) RegisterSSOUser(ctx context.Context, in *RegisterSSOUserRequest) (*RegisterSSOUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSSOUser", ctx, in)
	ret0, _ := ret[0].(*RegisterSSOUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSSOUser indicates an expected call of RegisterSSOUser.
func (mr *MockUserServiceServerMockRecorder) RegisterSSOUser(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSSOUser", reflect.TypeOf((*MockUserServiceServer)(nil).RegisterSSOUser), ctx, in)
}

// SendVerifyEmail mocks base method.
func (m *MockUserServiceServer) SendVerifyEmail(ctx context.Context, in *SendVerifyEmailRequest) (*SendVerifyEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerifyEmail", ctx, in)
	ret0, _ := ret[0].(*SendVerifyEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendVerifyEmail indicates an expected call of SendVerifyEmail.
func (mr *MockUserServiceServerMockRecorder) SendVerifyEmail(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerifyEmail", reflect.TypeOf((*MockUserServiceServer)(nil).SendVerifyEmail), ctx, in)
}

// VerifyEmail mocks base method.
func (m *MockUserServiceServer) VerifyEmail(ctx context.Context, in *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, in)
	ret0, _ := ret[0].(*VerifyEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUserServiceServerMockRecorder) VerifyEmail(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUserServiceServer)(nil).VerifyEmail), ctx, in)
}
