// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: user/v1/user.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/hgyowan/church-financial-account-grpc/gen/user/model/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterEmailUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nickname          string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Email             string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber       string `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Password          string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	PasswordConfirm   string `protobuf:"bytes,6,opt,name=password_confirm,json=passwordConfirm,proto3" json:"password_confirm,omitempty"`
	IsTermsAgreed     bool   `protobuf:"varint,7,opt,name=is_terms_agreed,json=isTermsAgreed,proto3" json:"is_terms_agreed,omitempty"`
	IsMarketingAgreed bool   `protobuf:"varint,8,opt,name=is_marketing_agreed,json=isMarketingAgreed,proto3" json:"is_marketing_agreed,omitempty"`
}

func (x *RegisterEmailUserRequest) Reset() {
	*x = RegisterEmailUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterEmailUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterEmailUserRequest) ProtoMessage() {}

func (x *RegisterEmailUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterEmailUserRequest.ProtoReflect.Descriptor instead.
func (*RegisterEmailUserRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterEmailUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterEmailUserRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RegisterEmailUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterEmailUserRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RegisterEmailUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterEmailUserRequest) GetPasswordConfirm() string {
	if x != nil {
		return x.PasswordConfirm
	}
	return ""
}

func (x *RegisterEmailUserRequest) GetIsTermsAgreed() bool {
	if x != nil {
		return x.IsTermsAgreed
	}
	return false
}

func (x *RegisterEmailUserRequest) GetIsMarketingAgreed() bool {
	if x != nil {
		return x.IsMarketingAgreed
	}
	return false
}

type RegisterEmailUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterEmailUserResponse) Reset() {
	*x = RegisterEmailUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterEmailUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterEmailUserResponse) ProtoMessage() {}

func (x *RegisterEmailUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterEmailUserResponse.ProtoReflect.Descriptor instead.
func (*RegisterEmailUserResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{1}
}

type LoginEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginEmailRequest) Reset() {
	*x = LoginEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginEmailRequest) ProtoMessage() {}

func (x *LoginEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginEmailRequest.ProtoReflect.Descriptor instead.
func (*LoginEmailRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *LoginEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginEmailRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *LoginEmailResponse) Reset() {
	*x = LoginEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginEmailResponse) ProtoMessage() {}

func (x *LoginEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginEmailResponse.ProtoReflect.Descriptor instead.
func (*LoginEmailResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *LoginEmailResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginEmailResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type RegisterSSOUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocialType        string `protobuf:"bytes,1,opt,name=social_type,json=socialType,proto3" json:"social_type,omitempty"`
	SsoUserId         string `protobuf:"bytes,2,opt,name=sso_user_id,json=ssoUserId,proto3" json:"sso_user_id,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Nickname          string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	PhoneNumber       string `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	IsTermsAgreed     bool   `protobuf:"varint,6,opt,name=is_terms_agreed,json=isTermsAgreed,proto3" json:"is_terms_agreed,omitempty"`
	IsMarketingAgreed bool   `protobuf:"varint,7,opt,name=is_marketing_agreed,json=isMarketingAgreed,proto3" json:"is_marketing_agreed,omitempty"`
}

func (x *RegisterSSOUserRequest) Reset() {
	*x = RegisterSSOUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSSOUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSSOUserRequest) ProtoMessage() {}

func (x *RegisterSSOUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSSOUserRequest.ProtoReflect.Descriptor instead.
func (*RegisterSSOUserRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterSSOUserRequest) GetSocialType() string {
	if x != nil {
		return x.SocialType
	}
	return ""
}

func (x *RegisterSSOUserRequest) GetSsoUserId() string {
	if x != nil {
		return x.SsoUserId
	}
	return ""
}

func (x *RegisterSSOUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterSSOUserRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RegisterSSOUserRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RegisterSSOUserRequest) GetIsTermsAgreed() bool {
	if x != nil {
		return x.IsTermsAgreed
	}
	return false
}

func (x *RegisterSSOUserRequest) GetIsMarketingAgreed() bool {
	if x != nil {
		return x.IsMarketingAgreed
	}
	return false
}

type RegisterSSOUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterSSOUserResponse) Reset() {
	*x = RegisterSSOUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSSOUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSSOUserResponse) ProtoMessage() {}

func (x *RegisterSSOUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSSOUserResponse.ProtoReflect.Descriptor instead.
func (*RegisterSSOUserResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{5}
}

type LoginSSORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocialType string `protobuf:"bytes,1,opt,name=social_type,json=socialType,proto3" json:"social_type,omitempty"`
	Code       string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *LoginSSORequest) Reset() {
	*x = LoginSSORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginSSORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginSSORequest) ProtoMessage() {}

func (x *LoginSSORequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginSSORequest.ProtoReflect.Descriptor instead.
func (*LoginSSORequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{6}
}

func (x *LoginSSORequest) GetSocialType() string {
	if x != nil {
		return x.SocialType
	}
	return ""
}

func (x *LoginSSORequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type LoginSSOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *LoginSSOResponse) Reset() {
	*x = LoginSSOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginSSOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginSSOResponse) ProtoMessage() {}

func (x *LoginSSOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginSSOResponse.ProtoReflect.Descriptor instead.
func (*LoginSSOResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{7}
}

func (x *LoginSSOResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginSSOResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type VerifyEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *VerifyEmailRequest) Reset() {
	*x = VerifyEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEmailRequest) ProtoMessage() {}

func (x *VerifyEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEmailRequest.ProtoReflect.Descriptor instead.
func (*VerifyEmailRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{8}
}

func (x *VerifyEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *VerifyEmailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type VerifyEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyEmailResponse) Reset() {
	*x = VerifyEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEmailResponse) ProtoMessage() {}

func (x *VerifyEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEmailResponse.ProtoReflect.Descriptor instead.
func (*VerifyEmailResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{9}
}

type SendVerifyEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *SendVerifyEmailRequest) Reset() {
	*x = SendVerifyEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVerifyEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVerifyEmailRequest) ProtoMessage() {}

func (x *SendVerifyEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVerifyEmailRequest.ProtoReflect.Descriptor instead.
func (*SendVerifyEmailRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{10}
}

func (x *SendVerifyEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type SendVerifyEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendVerifyEmailResponse) Reset() {
	*x = SendVerifyEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_v1_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVerifyEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVerifyEmailResponse) ProtoMessage() {}

func (x *SendVerifyEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVerifyEmailResponse.ProtoReflect.Descriptor instead.
func (*SendVerifyEmailResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{11}
}

var File_user_v1_user_proto protoreflect.FileDescriptor

var file_user_v1_user_proto_rawDesc = []byte{
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x04, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0xec, 0x82, 0xac, 0xec, 0x9a, 0xa9, 0xec, 0x9e, 0x90, 0x20,
	0xec, 0x9d, 0xb4, 0xeb, 0xa6, 0x84, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0x92, 0x41, 0x0b, 0x32, 0x09, 0xeb, 0x8b, 0x89, 0xeb, 0x84, 0xa4, 0xec, 0x9e, 0x84, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0xec, 0x9d,
	0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xec, 0xa3, 0xbc, 0xec, 0x86, 0x8c, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12,
	0x32, 0x10, 0xed, 0x9c, 0xb4, 0xeb, 0x8c, 0x80, 0xed, 0x8f, 0xb0, 0x20, 0xeb, 0xb2, 0x88, 0xed,
	0x98, 0xb8, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xeb, 0xb9, 0x84, 0xeb, 0xb0, 0x80, 0xeb, 0xb2,
	0x88, 0xed, 0x98, 0xb8, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x43,
	0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xeb,
	0xb9, 0x84, 0xeb, 0xb0, 0x80, 0xeb, 0xb2, 0x88, 0xed, 0x98, 0xb8, 0x20, 0xed, 0x99, 0x95, 0xec,
	0x9d, 0xb8, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x12, 0x47, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x32, 0x1a, 0xec, 0x9d, 0xb4, 0xec, 0x9a, 0xa9, 0xec, 0x95, 0xbd, 0xea, 0xb4, 0x80, 0x20,
	0xeb, 0x8f, 0x99, 0xec, 0x9d, 0x98, 0x20, 0xec, 0x97, 0xac, 0xeb, 0xb6, 0x80, 0x52, 0x0d, 0x69,
	0x73, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25,
	0xeb, 0xa7, 0x88, 0xec, 0xbc, 0x80, 0xed, 0x8c, 0x85, 0x20, 0xec, 0xa0, 0x95, 0xeb, 0xb3, 0xb4,
	0x20, 0xec, 0x88, 0x98, 0xec, 0x8b, 0xa0, 0x20, 0xeb, 0x8f, 0x99, 0xec, 0x9d, 0x98, 0x20, 0xec,
	0x97, 0xac, 0xeb, 0xb6, 0x80, 0x52, 0x11, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65, 0x64, 0x3a, 0x79, 0x92, 0x41, 0x76, 0x0a, 0x74, 0x32,
	0x1d, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xed, 0x9a, 0x8c, 0xec, 0x9b,
	0x90, 0xea, 0xb0, 0x80, 0xec, 0x9e, 0x85, 0x20, 0xec, 0x9a, 0x94, 0xec, 0xb2, 0xad, 0xd2, 0x01,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0xd2, 0x01, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0xd2, 0x01, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0xd2, 0x01, 0x0f, 0x69, 0x73,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0xd2, 0x01, 0x13,
	0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9e, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xec, 0x9d, 0xb4, 0xeb,
	0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xeb, 0xb9, 0x84, 0xeb, 0xb0, 0x80, 0xeb, 0xb2, 0x88, 0xed, 0x98,
	0xb8, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x34, 0x92, 0x41, 0x31,
	0x0a, 0x2f, 0x32, 0x1a, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xeb, 0xa1,
	0x9c, 0xea, 0xb7, 0xb8, 0xec, 0x9d, 0xb8, 0x20, 0xec, 0x9a, 0x94, 0xec, 0xb2, 0xad, 0xd2, 0x01,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0xd2, 0x01, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0x92, 0x41, 0x12, 0x32, 0x10, 0xec, 0x97, 0x91, 0xec, 0x84, 0xb8, 0xec, 0x8a, 0xa4, 0x20, 0xed,
	0x86, 0xa0, 0xed, 0x81, 0xb0, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13,
	0xeb, 0xa6, 0xac, 0xed, 0x94, 0x84, 0xeb, 0xa0, 0x88, 0xec, 0x8b, 0x9c, 0x20, 0xed, 0x86, 0xa0,
	0xed, 0x81, 0xb0, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x32, 0x1a, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94,
	0xec, 0x9d, 0xbc, 0x20, 0xeb, 0xa1, 0x9c, 0xea, 0xb7, 0xb8, 0xec, 0x9d, 0xb8, 0x20, 0xec, 0x9d,
	0x91, 0xeb, 0x8b, 0xb5, 0xd2, 0x01, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0xd2, 0x01, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xba, 0x04, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x53, 0x4f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x53, 0x53, 0x4f, 0x20, 0xea, 0xb5,
	0xac, 0xeb, 0xb6, 0x84, 0x20, 0x28, 0x6b, 0x61, 0x6b, 0x61, 0x6f, 0x2c, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x29, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x0b, 0x73, 0x73, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x53, 0x53, 0x4f, 0x20,
	0xec, 0x9c, 0xa0, 0xec, 0xa0, 0x80, 0x20, 0x49, 0x44, 0x52, 0x09, 0x73, 0x73, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0xec, 0x82, 0xac, 0xec, 0x9a, 0xa9, 0xec,
	0x9e, 0x90, 0x20, 0xec, 0x9d, 0xb4, 0xeb, 0xa6, 0x84, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xeb, 0x8b, 0x89, 0xeb, 0x84, 0xa4, 0xec, 0x9e,
	0x84, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0xed, 0x9c, 0xb4, 0xeb, 0x8c, 0x80, 0xed, 0x8f,
	0xb0, 0x20, 0xeb, 0xb2, 0x88, 0xed, 0x98, 0xb8, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x32, 0x1a, 0xec, 0x9d, 0xb4, 0xec, 0x9a, 0xa9, 0xec, 0x95, 0xbd, 0xea, 0xb4,
	0x80, 0x20, 0xeb, 0x8f, 0x99, 0xec, 0x9d, 0x98, 0x20, 0xec, 0x97, 0xac, 0xeb, 0xb6, 0x80, 0x52,
	0x0d, 0x69, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x64, 0x12, 0x5a,
	0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x32, 0x25, 0xeb, 0xa7, 0x88, 0xec, 0xbc, 0x80, 0xed, 0x8c, 0x85, 0x20, 0xec, 0xa0, 0x95, 0xeb,
	0xb3, 0xb4, 0x20, 0xec, 0x88, 0x98, 0xec, 0x8b, 0xa0, 0x20, 0xeb, 0x8f, 0x99, 0xec, 0x9d, 0x98,
	0x20, 0xec, 0x97, 0xac, 0xeb, 0xb6, 0x80, 0x52, 0x11, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65, 0x64, 0x3a, 0x74, 0x92, 0x41, 0x71, 0x0a,
	0x6f, 0x32, 0x17, 0x53, 0x53, 0x4f, 0x20, 0xed, 0x9a, 0x8c, 0xec, 0x9b, 0x90, 0xea, 0xb0, 0x80,
	0xec, 0x9e, 0x85, 0x20, 0xec, 0x9a, 0x94, 0xec, 0xb2, 0xad, 0xd2, 0x01, 0x0b, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0b, 0x73, 0x73, 0x6f, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0xd2, 0x01, 0x13, 0x69, 0x73, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64,
	0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x53, 0x4f, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0f,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x53, 0x53, 0x4f, 0x20, 0xea,
	0xb5, 0xac, 0xeb, 0xb6, 0x84, 0x20, 0x28, 0x6b, 0x61, 0x6b, 0x61, 0x6f, 0x2c, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x29, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x30, 0x92, 0x41, 0x2d, 0x0a,
	0x2b, 0x32, 0x14, 0x53, 0x53, 0x4f, 0x20, 0xeb, 0xa1, 0x9c, 0xea, 0xb7, 0xb8, 0xec, 0x9d, 0xb8,
	0x20, 0xec, 0x9a, 0x94, 0xec, 0xb2, 0xad, 0xd2, 0x01, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc7, 0x01, 0x0a,
	0x10, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0xec, 0x97,
	0x91, 0xec, 0x84, 0xb8, 0xec, 0x8a, 0xa4, 0x20, 0xed, 0x86, 0xa0, 0xed, 0x81, 0xb0, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0xeb, 0xa6, 0xac, 0xed, 0x94, 0x84, 0xeb,
	0xa0, 0x88, 0xec, 0x8b, 0x9c, 0x20, 0xed, 0x86, 0xa0, 0xed, 0x81, 0xb0, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a,
	0x35, 0x32, 0x14, 0x53, 0x53, 0x4f, 0x20, 0xeb, 0xa1, 0x9c, 0xea, 0xb7, 0xb8, 0xec, 0x9d, 0xb8,
	0x20, 0xec, 0x9d, 0x91, 0xeb, 0x8b, 0xb5, 0xd2, 0x01, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xd2, 0x01, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x32, 0x09, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xec, 0x9d, 0xb8, 0xec, 0xa6, 0x9d, 0xeb, 0xb2,
	0x88, 0xed, 0x98, 0xb8, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a,
	0x2e, 0x32, 0x1d, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xec, 0x9d, 0xb8,
	0xec, 0xa6, 0x9d, 0xed, 0x95, 0x98, 0xea, 0xb8, 0xb0, 0x20, 0xec, 0x9a, 0x94, 0xec, 0xb2, 0xad,
	0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0x32, 0x2b, 0xec,
	0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xec, 0x9d, 0xb8, 0xec, 0xa6, 0x9d, 0xed,
	0x95, 0x98, 0xea, 0xb8, 0xb0, 0x20, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xeb, 0xb0, 0x9c,
	0xec, 0x86, 0xa1, 0x20, 0xec, 0x9a, 0x94, 0xec, 0xb2, 0xad, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfd, 0x16,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xba, 0x04,
	0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x53, 0x4f, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x53, 0x4f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x53, 0x4f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3, 0x03, 0x92, 0x41, 0xae, 0x03, 0x12, 0x10, 0x53, 0x53, 0x4f,
	0x20, 0xed, 0x9a, 0x8c, 0xec, 0x9b, 0x90, 0xea, 0xb0, 0x80, 0xec, 0x9e, 0x85, 0x1a, 0x10, 0x53,
	0x53, 0x4f, 0x20, 0xed, 0x9a, 0x8c, 0xec, 0x9b, 0x90, 0xea, 0xb0, 0x80, 0xec, 0x9e, 0x85, 0x4a,
	0xbd, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0xb5, 0x01, 0x0a, 0x86, 0x01, 0x28, 0x34, 0x30,
	0x30, 0x30, 0x31, 0x29, 0x20, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x35,
	0x30, 0x30, 0x30, 0x32, 0x29, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x20, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20,
	0x28, 0x35, 0x30, 0x30, 0x30, 0x33, 0x29, 0x20, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x20, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x35, 0x30, 0x30, 0x30, 0x34, 0x29, 0x20,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x73, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0xec, 0x97, 0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x22,
	0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d, 0x4a,
	0xc7, 0x01, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0xbf, 0x01, 0x0a, 0x90, 0x01, 0x28, 0x31, 0x30,
	0x30, 0x30, 0x31, 0x29, 0x20, 0x66, 0x69, 0x6c, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x31,
	0x30, 0x30, 0x30, 0x33, 0x29, 0x20, 0x66, 0x69, 0x6c, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28,
	0x31, 0x30, 0x30, 0x30, 0x34, 0x29, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x67,
	0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x34, 0x30,
	0x30, 0x30, 0x32, 0x29, 0x20, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x34, 0x30, 0x30, 0x30, 0x33, 0x29,
	0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a,
	0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0xec, 0x97, 0x90,
	0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a,
	0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x12, 0xdd, 0x03, 0x0a, 0x11, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x03, 0x92, 0x41, 0xd3, 0x02, 0x12, 0x16,
	0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xed, 0x9a, 0x8c, 0xec, 0x9b, 0x90,
	0xea, 0xb0, 0x80, 0xec, 0x9e, 0x85, 0x1a, 0x16, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d,
	0xbc, 0x20, 0xed, 0x9a, 0x8c, 0xec, 0x9b, 0x90, 0xea, 0xb0, 0x80, 0xec, 0x9e, 0x85, 0x4a, 0x92,
	0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x8a, 0x01, 0x0a, 0x5c, 0x28, 0x34, 0x30, 0x30, 0x30,
	0x31, 0x29, 0x20, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x35, 0x30, 0x30,
	0x30, 0x31, 0x29, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x35, 0x30, 0x30, 0x30,
	0x32, 0x29, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0xec, 0x97, 0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94,
	0xeb, 0x93, 0x9c, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75,
	0x6c, 0x6c, 0x7d, 0x4a, 0x8b, 0x01, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x83, 0x01, 0x0a, 0x55,
	0x28, 0x31, 0x30, 0x30, 0x30, 0x31, 0x29, 0x20, 0x66, 0x69, 0x6c, 0x61, 0x20, 0x74, 0x6f, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x3c, 0x62, 0x72, 0x3e,
	0x20, 0x28, 0x31, 0x30, 0x30, 0x30, 0x34, 0x29, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28,
	0x34, 0x30, 0x30, 0x30, 0x32, 0x29, 0x20, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0xec, 0x97, 0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93,
	0x9c, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c,
	0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x8b, 0x04, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x53, 0x53, 0x4f, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x03, 0x92,
	0x41, 0x97, 0x03, 0x12, 0x0d, 0x53, 0x53, 0x4f, 0x20, 0xeb, 0xa1, 0x9c, 0xea, 0xb7, 0xb8, 0xec,
	0x9d, 0xb8, 0x1a, 0x0d, 0x53, 0x53, 0x4f, 0x20, 0xeb, 0xa1, 0x9c, 0xea, 0xb7, 0xb8, 0xec, 0x9d,
	0xb8, 0x4a, 0xb9, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0xb1, 0x01, 0x0a, 0x82, 0x01, 0x28,
	0x34, 0x30, 0x30, 0x30, 0x31, 0x29, 0x20, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20,
	0x28, 0x35, 0x30, 0x30, 0x30, 0x33, 0x29, 0x20, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x20, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x35, 0x30, 0x30, 0x30, 0x34, 0x29, 0x20,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x73, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x35, 0x30, 0x30, 0x30, 0x35, 0x29,
	0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2a, 0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0xec, 0x97, 0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x22, 0x2c, 0x20,
	0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d, 0x4a, 0x4b, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x44, 0x0a, 0x16, 0x28, 0x34, 0x30, 0x30, 0x30, 0x34, 0x29, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0xec, 0x97,
	0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d, 0x4a, 0x6e, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x67, 0x0a, 0x39, 0x28, 0x31, 0x30, 0x30, 0x30, 0x31, 0x29, 0x20, 0x66, 0x69, 0x6c,
	0x61, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x31, 0x30, 0x30, 0x30, 0x34, 0x29, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0xec, 0x97,
	0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x7b, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x12, 0xc9, 0x03, 0x0a, 0x0a, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x81, 0x03, 0x92, 0x41, 0xd7, 0x02, 0x12, 0x13, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec,
	0x9d, 0xbc, 0x20, 0xeb, 0xa1, 0x9c, 0xea, 0xb7, 0xb8, 0xec, 0x9d, 0xb8, 0x1a, 0x13, 0xec, 0x9d,
	0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xeb, 0xa1, 0x9c, 0xea, 0xb7, 0xb8, 0xec, 0x9d,
	0xb8, 0x4a, 0x6e, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x67, 0x0a, 0x39, 0x28, 0x34, 0x30, 0x30,
	0x30, 0x31, 0x29, 0x20, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x35, 0x30,
	0x30, 0x30, 0x35, 0x29, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0xec, 0x97, 0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93,
	0x9c, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c,
	0x7d, 0x4a, 0x4b, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x44, 0x0a, 0x16, 0x28, 0x34, 0x30, 0x30,
	0x30, 0x34, 0x29, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0xec, 0x97, 0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x22, 0x2c,
	0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d, 0x4a, 0x6e,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x67, 0x0a, 0x39, 0x28, 0x31, 0x30, 0x30, 0x30, 0x31, 0x29,
	0x20, 0x66, 0x69, 0x6c, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x31, 0x30, 0x30, 0x30, 0x34,
	0x29, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0xec, 0x97, 0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x22, 0x2c,
	0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0xa0, 0x03, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd5, 0x02, 0x92, 0x41, 0xaa, 0x02, 0x12, 0x16, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d,
	0xbc, 0x20, 0xec, 0x9d, 0xb8, 0xec, 0xa6, 0x9d, 0xed, 0x95, 0x98, 0xea, 0xb8, 0xb0, 0x1a, 0x16,
	0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xec, 0x9d, 0xb8, 0xec, 0xa6, 0x9d,
	0xed, 0x95, 0x98, 0xea, 0xb8, 0xb0, 0x4a, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x49, 0x0a,
	0x1b, 0x28, 0x34, 0x30, 0x30, 0x30, 0x31, 0x29, 0x20, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x28,
	0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0xec, 0x97, 0x90, 0xeb,
	0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d, 0x4a, 0xa5, 0x01, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x9d, 0x01, 0x0a, 0x6f, 0x28, 0x31, 0x30, 0x30, 0x30, 0x33, 0x29, 0x20, 0x66, 0x61, 0x69,
	0x6c, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28, 0x31, 0x30, 0x30, 0x30, 0x34, 0x29, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x3c,
	0x62, 0x72, 0x3e, 0x20, 0x28, 0x34, 0x30, 0x30, 0x30, 0x32, 0x29, 0x20, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20,
	0x28, 0x34, 0x30, 0x30, 0x30, 0x33, 0x29, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0xec, 0x97, 0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c,
	0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x7d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0xd3, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfc,
	0x02, 0x92, 0x41, 0xcc, 0x02, 0x12, 0x24, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc,
	0x20, 0xec, 0x9d, 0xb8, 0xec, 0xa6, 0x9d, 0xed, 0x95, 0x98, 0xea, 0xb8, 0xb0, 0x20, 0xeb, 0xa9,
	0x94, 0xec, 0x9d, 0xbc, 0x20, 0xeb, 0xb0, 0x9c, 0xec, 0x86, 0xa1, 0x1a, 0x24, 0xec, 0x9d, 0xb4,
	0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xec, 0x9d, 0xb8, 0xec, 0xa6, 0x9d, 0xed, 0x95, 0x98,
	0xea, 0xb8, 0xb0, 0x20, 0xeb, 0xa9, 0x94, 0xec, 0x9d, 0xbc, 0x20, 0xeb, 0xb0, 0x9c, 0xec, 0x86,
	0xa1, 0x4a, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x49, 0x0a, 0x1b, 0x28, 0x34, 0x30, 0x30,
	0x30, 0x31, 0x29, 0x20, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0xec, 0x97, 0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94,
	0xeb, 0x93, 0x9c, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75,
	0x6c, 0x6c, 0x7d, 0x4a, 0xab, 0x01, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0xa3, 0x01, 0x0a, 0x75,
	0x28, 0x31, 0x30, 0x30, 0x30, 0x31, 0x29, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x6f, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x3c, 0x62, 0x72, 0x3e,
	0x20, 0x28, 0x31, 0x30, 0x30, 0x30, 0x34, 0x29, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28,
	0x33, 0x30, 0x30, 0x30, 0x31, 0x29, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x73,
	0x65, 0x6e, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x20, 0x28,
	0x34, 0x30, 0x30, 0x30, 0x32, 0x29, 0x20, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0xec, 0x97, 0x90, 0xeb, 0x9f, 0xac, 0xec, 0xbd, 0x94, 0xeb, 0x93,
	0x9c, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x6e, 0x75, 0x6c, 0x6c,
	0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x42, 0xdc, 0x02,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x67, 0x79,
	0x6f, 0x77, 0x61, 0x6e, 0x2f, 0x63, 0x68, 0x75, 0x72, 0x63, 0x68, 0x2d, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x92, 0x41,
	0x9a, 0x02, 0x12, 0x68, 0x0a, 0x0f, 0x43, 0x46, 0x4d, 0x20, 0x41, 0x50, 0x49, 0x20, 0x53, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x14, 0x67, 0x52, 0x50, 0x43, 0x2d, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x68, 0x67, 0x79, 0x6f, 0x77, 0x61, 0x6e, 0x2f, 0x63, 0x68, 0x75, 0x72, 0x63, 0x68,
	0x2d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x1a, 0x19, 0x63, 0x66,
	0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x64, 0x65, 0x76, 0x2e, 0x68, 0x6f, 0x6c, 0x79, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x02, 0x02, 0x01, 0x52, 0x55, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x34, 0x4a, 0x32,
	0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3a, 0x20, 0x22, 0x32, 0x30, 0x30, 0x20, 0xec, 0x97, 0x90, 0x20, 0xed, 0x95, 0xb4,
	0xeb, 0x8b, 0xb9, 0xed, 0x95, 0x98, 0xeb, 0x8a, 0x94, 0x20, 0xec, 0x9d, 0x91, 0xeb, 0x8b, 0xb5,
	0x22, 0x7d, 0x5a, 0x24, 0x0a, 0x22, 0x0a, 0x0c, 0x58, 0x2d, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x08, 0x02, 0x1a, 0x0c, 0x78, 0x2d, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x12, 0x0a, 0x10, 0x0a, 0x0c, 0x58, 0x2d,
	0x55, 0x73, 0x65, 0x72, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_v1_user_proto_rawDescOnce sync.Once
	file_user_v1_user_proto_rawDescData = file_user_v1_user_proto_rawDesc
)

func file_user_v1_user_proto_rawDescGZIP() []byte {
	file_user_v1_user_proto_rawDescOnce.Do(func() {
		file_user_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_v1_user_proto_rawDescData)
	})
	return file_user_v1_user_proto_rawDescData
}

var file_user_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_user_v1_user_proto_goTypes = []interface{}{
	(*RegisterEmailUserRequest)(nil),  // 0: user.v1.RegisterEmailUserRequest
	(*RegisterEmailUserResponse)(nil), // 1: user.v1.RegisterEmailUserResponse
	(*LoginEmailRequest)(nil),         // 2: user.v1.LoginEmailRequest
	(*LoginEmailResponse)(nil),        // 3: user.v1.LoginEmailResponse
	(*RegisterSSOUserRequest)(nil),    // 4: user.v1.RegisterSSOUserRequest
	(*RegisterSSOUserResponse)(nil),   // 5: user.v1.RegisterSSOUserResponse
	(*LoginSSORequest)(nil),           // 6: user.v1.LoginSSORequest
	(*LoginSSOResponse)(nil),          // 7: user.v1.LoginSSOResponse
	(*VerifyEmailRequest)(nil),        // 8: user.v1.VerifyEmailRequest
	(*VerifyEmailResponse)(nil),       // 9: user.v1.VerifyEmailResponse
	(*SendVerifyEmailRequest)(nil),    // 10: user.v1.SendVerifyEmailRequest
	(*SendVerifyEmailResponse)(nil),   // 11: user.v1.SendVerifyEmailResponse
}
var file_user_v1_user_proto_depIdxs = []int32{
	4,  // 0: user.v1.UserService.RegisterSSOUser:input_type -> user.v1.RegisterSSOUserRequest
	0,  // 1: user.v1.UserService.RegisterEmailUser:input_type -> user.v1.RegisterEmailUserRequest
	6,  // 2: user.v1.UserService.LoginSSO:input_type -> user.v1.LoginSSORequest
	2,  // 3: user.v1.UserService.LoginEmail:input_type -> user.v1.LoginEmailRequest
	8,  // 4: user.v1.UserService.VerifyEmail:input_type -> user.v1.VerifyEmailRequest
	10, // 5: user.v1.UserService.SendVerifyEmail:input_type -> user.v1.SendVerifyEmailRequest
	5,  // 6: user.v1.UserService.RegisterSSOUser:output_type -> user.v1.RegisterSSOUserResponse
	1,  // 7: user.v1.UserService.RegisterEmailUser:output_type -> user.v1.RegisterEmailUserResponse
	7,  // 8: user.v1.UserService.LoginSSO:output_type -> user.v1.LoginSSOResponse
	3,  // 9: user.v1.UserService.LoginEmail:output_type -> user.v1.LoginEmailResponse
	9,  // 10: user.v1.UserService.VerifyEmail:output_type -> user.v1.VerifyEmailResponse
	11, // 11: user.v1.UserService.SendVerifyEmail:output_type -> user.v1.SendVerifyEmailResponse
	6,  // [6:12] is the sub-list for method output_type
	0,  // [0:6] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_user_v1_user_proto_init() }
func file_user_v1_user_proto_init() {
	if File_user_v1_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_v1_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterEmailUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterEmailUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSSOUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSSOUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginSSORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginSSOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVerifyEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_v1_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVerifyEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_v1_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_v1_user_proto_goTypes,
		DependencyIndexes: file_user_v1_user_proto_depIdxs,
		MessageInfos:      file_user_v1_user_proto_msgTypes,
	}.Build()
	File_user_v1_user_proto = out.File
	file_user_v1_user_proto_rawDesc = nil
	file_user_v1_user_proto_goTypes = nil
	file_user_v1_user_proto_depIdxs = nil
}
